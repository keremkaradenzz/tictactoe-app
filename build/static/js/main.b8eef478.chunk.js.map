{"version":3,"sources":["components/ResultGame.jsx","components/GameBoard.jsx","components/Reset.jsx","App.js","index.js"],"names":["ResultGame","playerResult","value","winningArrays","counter","i","Number","j","newArr","push","leftDiagonal","rightDiagonal","k","winnigX","winnigO","draw","length","map","item","indexOf","className","onClick","window","location","reload","GameBoard","useState","setValue","player","setPlayer","Array","Math","pow","fill","squares","setSquares","buttonArrays","sendData","movement","whoPlay","axios","post","body","then","response","console","log","catch","error","handleClick","index","e","x","y","row","column","createGameBoard","type","onChange","target","min","max","slice","Reset","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b8eef478.chunk.js","sourcesContent":["import React from \"react\";\n\nconst ResultGame = ({ playerResult, value }) => {\n  // winning nummers\n  let winningArrays = [];\n  let counter = 0;\n  //selected all rows\n  for (let i = 0; i < Number(value); i++) {\n    winningArrays[i] = [];\n    for (let j = 0; j < Number(value); j++) {\n      winningArrays[i][j] = counter;\n      counter++;\n    }\n  }\n  let newArr = [...winningArrays]; \n\n  counter = 0;\n  // selected all column\n  for (let i = 0; i < value; i++) {\n    winningArrays[i] = [];\n    for (let j = 0; j < Number(value); j++) {\n      winningArrays[i][j] = i + counter;\n      counter = counter + Number(value);\n    }\n    counter = 0;\n  }\n  newArr.push(...winningArrays);\n\n  //selected left diagonal\n  let leftDiagonal = [[]];\n  for (let j = 0; j < Number(value); j++) {\n    counter = counter + (Number(value) - 1);\n    leftDiagonal[0][j] = 0 + counter;\n  }\n  counter = 0;\n  let rightDiagonal = [[]];\n  //selected right diagonal\n  for (let k = 0; k < Number(value); k++) {\n    rightDiagonal[0][k] = counter;\n    counter = counter + (Number(value) + 1);\n  }\n  newArr.push(...leftDiagonal, ...rightDiagonal);\n\n  // calculate winnig player\n  let winnigX = 0;              \n  let winnigO = 0;\n  let draw = 0;\n  for (let i = 0; i < newArr.length; i++) {\n    winnigX = 0;\n    winnigO = 0;\n    newArr[i].map((item) => {     // winning number array search\n      if (playerResult[item] === \"X\") {\n        winnigX++;\n      } else if (playerResult[item] === \"O\") {\n        winnigO++;\n      }\n    });\n    if (winnigX === Number(value)) {\n      break;\n    } else if (winnigO === Number(value)) {\n      break;\n    }\n  }\n  // calculate draw game\n  if (playerResult.indexOf(null) === -1) {\n    draw++;\n  }\n\n  const playAgain = () => window.location.reload();  \n\n  return (\n    <>\n      <p className=\"fs-4 fsw-bold\">Result Game</p>\n      {winnigX === Number(value) ? (\n        <p>winner X </p>\n      ) : winnigO ===  Number(value) ? (\n        <p>winner O </p>\n      ) : draw > 0 ? (\n        <p> draw</p>\n      ) : (\n        \"\"\n      )}\n      {draw > 0 ? (\n        <button className=\"btn btn-success \" onClick={playAgain}>\n          {\" \"}\n          Play Again{\" \"}\n        </button>\n      ) : (\n        \"\"\n      )}\n    </>\n  );\n};\n\nexport default ResultGame;\n","import React, { useState } from \"react\";\nimport ResultGame from \"./ResultGame\";\nimport axios from \"axios\";\nconst GameBoard = () => {\n  const [value, setValue] = useState(3); // NxN tic tac toe board size\n  const [player, setPlayer] = useState(true); // true player X false player O\n  const [squares, setSquares] = useState(Array(Math.pow(value,2)).fill(null)); // created item = fill array\n\n  const URL = \"http://140.82.59.206/gameLogger.php/\"; // POST URL\n\n  // Created Game Board\n  let buttonArrays = [];\n  const createGameBoard = (x, y) => {\n    for (let row = 1; row <= x; row++) {\n      //row\n      for (let column = 1; column <= y; column++) {\n        // column\n        buttonArrays.push(`${row},${column}`);\n      }\n    }\n\n    return buttonArrays;\n  };\n  // sending data \n  const sendData = (movement,whoPlay) => (\n    axios.post(URL, {\n        body: {\n          'action': `Move triggered (${whoPlay}) (${movement})`\n        },\n      })\n      .then(function (response) {\n        console.log(response);\n      })\n      .catch(function (error) {\n        console.log(error);\n      })\n   \n    )\n  const handleClick = (index, item) => (e) => {\n    let newArr = [...squares]; // copying the old data array\n    if (player) {\n    \n      sendData(item,'X')\n      newArr[index] = \"X\";\n      setPlayer(false); // replace  player\n    } else {\n     sendData(item,'O')\n      newArr[index] = \"O\";\n      setPlayer(true); // replace  player\n    }\n\n    setSquares(newArr);\n  };\n\n  createGameBoard(value, value); // Created NxN tic tac toe\n  return (\n    <>\n      <div className=\"col-12\">\n        <p className=\"fs-3\">Create NxN Tic Tac Toe (Min 3x3 - Max 6x6)</p>\n        <input\n          type=\"number\"\n          onChange={(e) => setValue(e.target.value)}\n          min=\"3\" max=\"6\"\n          value={value}\n        ></input>\n       \n      </div>\n      <br />\n      {buttonArrays.map((item, index) => {\n        return Math.pow(item.slice(2), 2) === buttonArrays.length ? (\n          <span>\n            <button\n              key={index}\n              className=\"btn btn-primary squares\"\n              onClick={handleClick(index, item)}\n              value={squares[index]}\n            >\n              {squares[index]}\n            </button>\n            <br />\n          </span>\n        ) : (\n          <button\n            key={index}\n            className=\"btn btn-primary squares\"\n            onClick={handleClick(index, item)}\n            value={squares[index]}\n          >\n            {squares[index]}\n          </button>\n        );\n      })}\n      {player ? (\n        <p className=\"fs-3\">Next Player X</p>\n      ) : (\n        <p className=\"fs-3\">Next Player O</p>\n      )}\n      <ResultGame\n        playerResult={squares}\n        value={value}\n      />\n    </>\n  );\n};\n\nexport default GameBoard;\n","import React from 'react';\n\n \n//Create Reset Game Buttons\nconst Reset = () => {\n\n    const resetGame = () => window.location.reload()\n    return(\n        <div className=\"col-12\">\n            <button className=\"btn btn-primary mt-3  \" onClick={resetGame}>Reset Game</button>\n        </div>\n    )\n\n}\nexport default Reset;","import React from \"react\";\nimport GameBoard from \"./components/GameBoard\";\nimport Reset from \"./components/Reset\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <GameBoard></GameBoard>\n          <Reset></Reset>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}